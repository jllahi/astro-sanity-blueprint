---
// https://docs.astro.build/en/guides/view-transitions/
import { ViewTransitions } from 'astro:transitions'
import '@/styles/global.css'
import Header from '@/components/Header.astro'
import Footer from '@/components/Footer.astro'
import '@fontsource-variable/inter'
import '@fontsource-variable/montserrat'
import { SEO, type Props as SEOProps } from 'astro-seo'
import { SITE_DESCRIPTION, SITE_IMAGE, SITE_TITLE } from '@/consts'

interface Props {
	seo?: SEOProps
}

const { seo } = Astro.props
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<link rel="sitemap" href="/sitemap-index.xml" />
		<link
			rel="alternate"
			type="application/rss+xml"
			title={SITE_TITLE}
			href={`${Astro.site}rss.xml`}
		/>
		<SEO
			title={seo?.title ?? SITE_TITLE}
			titleTemplate={`%s â€” ${SITE_TITLE}`}
			description={seo?.description ?? SITE_DESCRIPTION}
			openGraph={{
				basic: {
					title: seo?.title || SITE_TITLE,
					type: 'website', // TODO: https://ogp.me/#types
					image: SITE_IMAGE || '/open-graph.jpg',
				},
			}}
			{...seo}
		/>
		<ViewTransitions />
	</head>
	<body class="bg-color-white">
		<div class="flex h-svh flex-col items-center">
			<Header />
			<main class="w-full max-w-2xl flex-grow px-4 py-14">
				<slot />
			</main>
			<Footer />
		</div>
		<script>
			import { enableVisualEditing } from '@sanity/visual-editing'

			// Enables visual editing overlays
			// enableVisualEditing()
			enableVisualEditing({
				zIndex: 1000,
			})

			// Integrate with a router that uses the History API
			enableVisualEditing({
				history: {
					subscribe: (navigate) => {
						// eslint-disable-next-line @typescript-eslint/no-unused-vars
						const handler = (event: PopStateEvent) => {
							navigate({
								type: 'push',
								url: `${location.pathname}${location.search}`,
							})
						}
						window.addEventListener('popstate', handler)
						return () => window.removeEventListener('popstate', handler)
					},
					update: (update) => {
						switch (update.type) {
							case 'push':
								return window.history.pushState(null, '', update.url)
							case 'pop':
								return window.history.back()
							case 'replace':
								return window.history.replaceState(null, '', update.url)
							default:
								throw new Error(`Unknown update type: ${update.type}`)
						}
					},
				},
			})
		</script>
	</body>
</html>
